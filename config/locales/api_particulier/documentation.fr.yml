---
fr:
  api_particulier:
    documentation_pages:
      guide_migration:
        title: Guide de migration&nbsp;📋
        sections:
          - anchor: 'introduction'
            title: Introduction
            content: |+
              **Ce guide liste les changements effectués entre la version 2 de l’API&nbsp;Particulier et la version 3, et vous livre les éléments nécessaires pour effectuer la migration**.

              Les évolutions présentées ici ont été guidées par trois objectifs&nbsp;:&nbsp;
              - assurer une meilleure sécurité de la donnée des fournisseurs ;
              - normaliser les formats pour faciliter la compréhension et l’industrialisation ;
              - clarifier la documentation et simplifier les routes des différentes modalités d'appel ;
              - clarifier, documenter les réponses et les rendre actionnables par vos logiciels ;
              - faire converger l'architecture technique de l'API Particulier avec celle de l'API Entreprise.

              {:.fr-highlight.fr}
              > **Votre jeton d'accès reste identique 🔑**
              > Pour accéder à la version 3 de l'API&nbsp;Particulier, utilisez le même token qu'en V.2. En effet, tant que votre jeton est valide, il est inutile de refaire une demande d'accès car la migration vers la V.3 ne change pas les droits que vous avez déjà obtenu.
          - anchor: 'evolutions-generales'
            title: Évolutions générales
            subsections:
              - title: 1. Jeton d'accès à paramétrer dans le header
                anchor: 'jeton-daccès-à-paramétrer-dans-le-header-'
                content: |+
                  **🚀 Avec la V.3 :** Le jeton est à paramétrer uniquement dans le header de l’appel.

                  {:.fr-highlight.fr-highlight--example}
                  > **Avant** : Le jeton JWT pouvait être un paramètre de l’URL d’appel (query parameter).

                  **🤔 Pourquoi ?**
                  - Respecter les standards de sécurité ;
                  - Garantir que le token ne sera pas utilisé dans un navigateur.

                  **🧰 Comment ?**
                  Utilisez un client REST API pour tester les API pendant le développement.
                  Des clients sont disponibles gratuitement. API&nbsp;Particulier utilise pour ses propres tests le client Insomnia. Le plus connu sur le marché est Postman.
                  Une fois le client installé, vous pouvez directement intégrer notre fichier [Swagger/OpenAPI](<%= developers_openapi_path %>){:target="_blank"} dedans.

              - title: 2. Votre numéro de SIRET obligatoire dans le "recipient"
                anchor: 'votre-numéro-de-siret-obligatoire-dans-le-recipient'
                content: |+
                  **🚀 Avec la V.3 :** Le paramètre obligatoire `recipient` de l’URL d’appel devra obligatoirement être complété par votre numéro de SIRET.

                  {:.fr-highlight.fr-highlight--example}
                  > **Avant** : Ce paramètre obligatoire n’était pas contraint en termes de syntaxe.

                  **🤔 Pourquoi ?**
                  - Pour garantir la traçabilité de l’appel jusqu’au bénéficiaire ayant obtenu l’habilitation à appeler l’API&nbsp;Particulier et respecter nos engagements auprès des fournisseurs de données ;
                  - Nous avions trop d’utilisateurs inscrivant le numéro de SIRET ou RNA de l’entreprise/association recherchée.

                  {:.fr-highlight.fr-highlight--caution}
                  > **⚠️ Cas particulier**, _vous êtes un éditeur ?_
                  > Ce n’est pas votre numéro de SIRET mais celui de votre client public qu’il s’agira de renseigner. API&nbsp;Particulier doit pouvoir tracer pour quelle entité publique l'appel a été passé.

                  Pour en savoir plus sur les paramètres obligatoires d'appel, consultez les [spécifications techniques](<%= developers_path(anchor: 'renseigner-les-paramètres-dappel-et-de-traçabilité') %>).

              - title: 3. Codes erreurs spécifiques à chaque situation, actionnables et documentés
                anchor: 'codes-erreurs-spécifiques-à-chaque-situation-actionnables-et-documentés'
                content: |+
                  **🚀 Avec la V.3 :** Tous les codes erreur HTTPS sont accompagnés de codes plus précis, spécifiques à chaque situation d’erreur. Une explication en toutes lettres est également donnée dans la payload. Enfin, dans certains cas, une métadonnée actionnable est disponible.

                  Dans l’exemple ci-dessous, la clé `retry_in` permet de relancer un appel après le nombre de secondes indiquées.

                  ###### Exemple de _payload_ d’un code HTTP 502 :
                  ```
                  {
                    "errors": [
                      {
                        "code": "04501",
                        "title": "Analyse de la situation du compte en cours",
                        "detail": "La situation de l'entreprise requiert une
                                   analyse manuelle d'un agent de l'URSSAF.
                                   Une demande d'analyse vient d'être envoyée,
                                   cela prend au maximum 2 jours.",
                        "meta": {
                          "provider": "ACOSS",
                          "retry_in": 172800
                        }
                      }
                    ]
                  }
                  ```

                  {:.fr-highlight.fr-highlight--example}
                  > Avant : Seul le code HTTP standard vous était fourni. Il pouvait correspondre à de nombreuses situations.
                  > ###### Exemple de payload d’un code HTTP 502 :
                  > ```
                  > {
                  >   "errors": [
                  >     "L'ACOSS ne peut répondre à votre requête, réessayez ultérieurement  (erreur: Analyse de la situation du compte en cours)"
                  >   ]
                  > }
                  > ```

                  **🤔 Pourquoi ?**
                  - Pour préciser la nature de l’erreur et vous aider à la comprendre ;
                  - Pour vous permettre d’actionner automatiquement l’erreur en utilisant le code.


                  **🧰 Comment ?**
                  Utiliser les libellés pour comprendre l’erreur rencontrée, voire automatiser votre logiciel en fonction du code.
                  La liste de tous les codes erreurs spécifiques (environ 80) est disponible dans le [Swagger](<%= developers_openapi_path %>){:target="_blank"}. La gestion des erreurs et l'explication des codes retours est détaillée dans la [documentation technique générale](<%= developers_path(anchor: 'code-https-et-gestion-des-erreurs') %>){:target="_blank"}.

              - title: 4. Volumétrie indiquée dans le header et actionnable
                anchor: 'volumétrie-indiquée-dans-le-header-et-actionnable'
                content: |+
                  La gestion de la volumétrie est maintenue identique à la dernière évolution de la V.2 et expliquée dans cette [documentation](<%= developers_path(anchor: 'volumétrie') %>)

              - title: 5. Une route spécifique pour chaque modalité d'appel
                anchor: 'une-route-specifique-pour-chaque-modalite-d-appel'
                content: |+
                  **🚀 Avec la V.3 :** Chaque modalité d'appel d'une API a son propre endpoint

                  Désormais avec la V.3. chaque modalité d'appel a son propre endpoint, matérialisé ainsi dans l'URL d'appel :
                  - `/identite`, pour les appels avec les paramètres de l'identité pivot du particulier ;
                  - `/france_connect`, pour les appels avec FranceConnect ;
                  - `/identifiant`, pour les appels avec un numéro unique spécifique à l'API.

                  {:.fr-highlight.fr-highlight--example}
                  > **Avant** : Dans la V.2., une seule route existait par API, ce qui signifiait que les différentes modalités d'appel étaient toutes documentées au même endroit, entrainant plusieurs difficultés, dont notamment le fait de ne pas pouvoir rendre obligatoires certains paramètre pourtant obligatoires dans les faits.

                  **🤔 Pourquoi ?**
                  - Clarifier la documentation des paramètres d'appel ;
                  - Identifier précisémement les paramètres obligatoires ;
                  - Rendre actionnable le swagger et le fichier OpenAPI.

                  **🧰 Comment ?**
                  Utiliser [le swagger](<%= developers_openapi_path %>){:target="_blank"}.
              
              - title: 6. Les données des payloads, qualifiées et uniformisées d'un point de vue métier
                anchor: 'donnee-qualifiee-et-uniformisee-metier'
                content: |+
                  **🚀 Avec la V.3 :** Nous avons profité de la refonte technique pour uniformiser la façon de traiter la donnée entre les API et compléter significativement les documentations. Ces évolutions concernent plusieurs aspects : 
                  - **Normaliser et préciser les clés de certains champs qui définissent le même type d'information**. Ainsi quelques règles sont maintenant largement utilisées sur toutes les API, par exemple :
                    - le statut (étudiant, bénéficaire d'une prestation, etc.) est désormais toujours nommé par une clé préfixée par `est_...`, comme par exemple `est_boursier` ou `est_beneficiaire` ;
                    - les dates de début et de fin de droit auront les clés `date_debut_droit` / `date_fin_droit` ;
                    - les clés se veulent les plus précises possibles, par exemple, dans l'API étudiant, : la clé `code_commune` en V.2. devient `code_cog_insee_commune` en V.3. pour éviter toute confusion avec le code postal. 
                  - **Expliciter l'origine des diverses données d'identité transmises dans les payloads** et préciser si la donnée a été consolidée et comment. Par exemple : au travers d'un recoupement avec une pièce d'identité ou bien avec un répertoire ; 
                  - Uniformiser le style des clés pour faciliter votre lecture de la documentation. Le format choisi est désormais en XXXX TODO, c'est-à-dire que les mots sont séparés par des _, par exemple `code_cog_insee_commune`.

                  **🤔 Pourquoi ?**
                  - Simplifier la compréhension et la lecture des données transmises ;
                  - Faciliter l'intégration de l'API.


              - title: 7. Des payloads permettant de repérer plus facilement les scopes (droits d'accès)
                anchor: 'payloads-permettant-de-reperer-les-scopes'
                content: |+
                  **🚀 Avec la V.3 :** Les scopes sont repérables plus facilement car ils sont incarnés par une seule clé (qui peut être une clé parente) et qui dans la mesure du possible se trouve à la racine du tableau `"data"`. Ce changement est particulièrement visible sur l'API statut étudiant boursier : 

                  ###### Exemple avec la payload V.3. de l'API Étudiant boursier :
                  Dans cette payload, les différents scopes pour lesquels vous pouvez demander une habilitation sont très visibles :  

                  ```
                    {
                      "data": {
                        "identite": {   ## Scope "identité"
                          "nom": "Moustaki",
                          "prenoms": ["Georges", "Claude"],
                          "date_naissance": "1992-11-29",
                          "nom_commune_naissance": "Poitiers",
                          "sexe": "M"
                        },
                        "est_boursier": true, ## Scope "statut"
                        "periode_versement_bourse": { ## Scope "Période de versement"
                          "date_rentree": "2019-09-01",
                          "duree": 12
                        },
                        "etablissement_etudes": { ## Scope "Établissement et ville d'études"
                          "nom_commune": "Brest",
                          "nom_etablissement": "Carnot"
                        },
                        "echelon_bourse": "6", ## Scope "Échelon de la bourse"
                        "email": "georges@moustaki.fr", ## Scope "E-mail
                        "statut_bourse": { ## Scope "Statut définitif de la bourse"
                          "code": 0,
                          "libelle": "définitif"
                        }
                      },
                      "links": {},
                      "meta": {}
                    }
                  ```

                  {:.fr-highlight.fr-highlight--example}
                  > Avant : Les droits d'accès pouvait couvrir une ou plusieurs clés dans la payload, il n'y avait pas de règles. Dans certains cas, un scope pouvait même indiquer un périmètre de particuliers concernés.

                  > ###### Exemple avec la payload V.2. de l'API Étudiant boursier :
                  > ```
                  > {
                  >   "data": {
                  >     "nom": "Moustaki",
                  >     "prenom": "Georges",
                  >     "prenom2": "Claude",
                  >     "date_naissance": "1992-11-29",
                  >     "lieu_naissance": "Poitiers",
                  >     "sexe": "M",
                  >     "boursier": true,
                  >     "echelon_bourse": "6",
                  >     "email": "georges@moustaki.fr",
                  >     "date_de_rentree": "2019-09-01",
                  >     "duree_versement": 12,
                  >     "statut": 0,
                  >     "statut_libelle": "définitif",
                  >     "ville_etudes": "Brest",
                  >     "etablissement": "Carnot"
                  >   },
                  >   "links": {},
                  >   "meta": {}
                  > }
                  > ```

                  **🤔 Pourquoi ?**
                  Clarifier quelles informations sont disponibles pour chaque scope.
              
              - title: 8. Certains scopes ont été créés / supprimés / modifiés
                anchor: 'certains-scopes-crees-modifies-supprimes'
                content: |+
                  **🚀 Avec la V.3 :** Certains scopes (droits d'accès) ont été modifiés : 
                  - API Statut demandeur d'emploi : Le scope `pole_emploi_identifiant` a été créé. Par conséquent, l'identifiant pôle emploi n'est plus retourné par défaut par l'API.
                  - API Statut élève scolarisé : Le scope `men_statut_identite` a été créé. Par conséquent, les données d'identité de l'élève (nom, prénom, sexe et date de naissance) ne sont plus retournées par défaut par l'API.
                  - API Statut étudiant : Les scopes de cette API ont été largement transformés car ils étaient incompréhensibles. Les scopes `mesri_inscription_etudiant`, `mesri_inscription_autre` et  `mesri_admission` ont donc été supprimés et remplacés par un seul et même scope : `mesri_admissions`. Le scope `mesri_regime` a été créé. Par conséquent, le régime de formation de l'élève n'est plus donné par défaut.
                  XXXX TODO => Mieux comprendre les scopes

                  {:.fr-highlight.fr-highlight--example}
                  > **Avant** : Dans la V.2., 

                  **🤔 Pourquoi ?**
                  - De nouveaux scopes ont été créés afin de répondre aux exigences de l'[article 4 de la loi informatique et libertés](https://www.legifrance.gouv.fr/loda/article_lc/LEGIARTI000037822953/){:target="_blank"} qui stipule que seules les données strictement nécessaires à la réalisation des missions peuvent être manipulées. La création de nouveaux scopes permet une meilleure granularité
                  - Certains scopes filtraient les étudiant transmis selon leur régime de formation. Ce fonctionnement n'a pas lieu d'être, rendait la compréhension des scopes très difficile, il a donc été supprimé.

                  **🧰 Comment ?**
                  - Si vous aviez déjà demandé une habilitation pour les API statut demandeur d'emploi ou élève scolarisé, les scopes `pole_emploi_identifiant` et `men_statut_identite`, qui étaient disponibles par défaut en V.2. vous ont automatiquement été attribués. Vous n'avez rien à faire.
                  -

              - title: 8. Les appels via la modalité FranceConnect ne renvoient plus les données d'identité
                anchor: 'une-route-specifique-pour-chaque-modalite-d-appel'
                content: |+
                  **🚀 Avec la V.3 :** Lorsque vous utilisez les API avec FranceConnect, les données d'identité du particulier regroupées sous la clé `"identite"` ne seront plus renvoyées. 

                  **🤔 Pourquoi ?**
                  - C'est un impératif de FranceConnect ; 
                  - FranceConnect est en possession de l'identité pivot de l'usager, ces données sont certifiées et parfois plus fiables que les données livrées par les API, si vous avez besoin des données d'identité, vous pouvez donc les récupérer directement via FranceConnect.

                  **🧰 Comment ?**
                  XXXXX TODO

              - title: 9. Gestion des évolutions futures
                anchor: 'gestion-des-évolutions-futures'
                content: |+
                  **🚀 Avec la V.3 :** Toutes les API pourront évoluer indépendamment les unes des autres. Les anciennes versions resteront disponibles si le fournisseur de la donnée continue de nous transmettre les informations. Le numéro de version devient donc un paramètre de l’appel et non plus une valeur fixe pour toutes les API.
                  📩 Une infolettre annoncera systématiquement les nouvelles évolutions.

                  {:.fr-highlight.fr-highlight--example}
                  > **Avant** : L’évolution d’un endpoint exigeait la montée en version de toute l’API.

                  **🤔 Pourquoi ?**
                  - Permettre l’ajout de nouvelles informations sans forcer les fournisseurs de service à monter de version ;
                  - Continuer de garantir la continuité des API dans le temps.

                  **🧰 Comment ?**
                  Renseigner directement le numéro de la version voulue dans l’URL, au même endroit qu’avant, par exemple :
                  ```
                  https://particulier.api.gouv.fr/v3/mesri/statut_etudiant/identite
                  ```
      
      developers:
        title: Espace développeurs&nbsp;🛠
        sections:
          - anchor: 'prerequis-techniques'
            title: Prérequis techniques
            content: |+
              Voici la liste des **fondamentaux techniques à mettre en place pour le bon fonctionnement de l’API&nbsp;Particulier**&nbsp;:

              - ☑️ Être en mesure de gérer le protocole HTTPS ;
              - ☑️ Avoir une version de langage récente. Si vous utilisez Java, une version >= 1.8 est nécessaire (pour la gestion des certificats de +1024 bit, du TLS 1.2 minimum et des suites cryptographiques - ciphers) ;
              - ☑️ S’assurer que nos Autorités de Certification (AC) pour les certificats SSL sont autorisées par vos systèmes ;
              - ☑️ L'API&nbsp;Particulier est uniquement accessible par internet. Si vous avez un pare-feu, il faut donc prévoir de whitelister l'adresse IP du service API&nbsp;Particulier ;
              - ☑️ Il est interdit d'interroger l'API&nbsp;Particulier depuis un site web en front-end, car le jeton d'accès serait alors divulgué. Il vous faut donc interroger nos API depuis une application en back-end. Nous n'autoriserons pas le CORS (CORS - Cross Origin Ressource Sharing) ;
              - ☑️ Prévoir non seulement les coûts de développement mais également les coûts de maintenance ;
              - ☑️ Être en capacité de gérer les mises à jour de l'API&nbsp;Particulier.

              <br>

              {:.fr-highlight}
              > 💡 Pour mieux comprendre l'API&nbsp;Particulier avant de demander un accès, **vous pouvez utiliser [notre environnement de test](<%= developers_path(anchor: 'tester-api-preproduction') %>)**.

          - anchor: 'specifications-generales'
            title: Spécifications générales&nbsp;🎛
            subsections:
              - title: Respecter la volumétrie
                anchor: 'respecter-la-volumétrie'
                content: |+
                  #### Les plafonds

                  Les limites de volumétrie sur API&nbsp;Particulier se décomposent en deux règles principales&nbsp;:&nbsp;

                  - **Un plafond général par IP de 1000 requêtes/minute** ;

                  - **Une volumétrie par jeton&nbsp;:** 20 requêtes/secondes.

                  #### Informations volumétrie dans le header

                  ##### Pour toutes les réponses&nbsp;:

                  Dans toutes les réponses de nos API, le header vous transmet des informations sur la volumétrie&nbsp;:

                  {:.fr-table}
                  | Champs du header    |   Signification    |     Format           |
                  |:------------------------------|:------------------|:------------:|
                  | `RateLimit-Limit` |La **limite** concernant l'endpoint appelé, soit le nombre de requête/minute. | Nombre|
                  | `RateLimit-Remaining` |Le **nombre d'appels restants** durant la période courante d'une minute. | Nombre |
                  | `RateLimit-Reset` |La **fin de la période** courante. | Timestamp |

                  {:.fr-highlight.fr-highlight--example}
                  > **Exemple&nbsp;:**
                  > Considérons un endpoint ayant une limite de 50 appels /minute.
                  > Vous faîtes un premier appel à 10h00 pile, et effectuez un second appel 20 secondes plus tard, puis un troisième 10 secondes plus tard, vous aurez les valeurs suivantes :
                  > - `RateLimit-Limit` : 50 ;
                  > - `RateLimit-Remaining` : 47 (50 moins les 3 appels effectués) ;
                  > - `RateLimit-Reset` : [*Timestamp correspondant au jour présent à 10h01*]. Le premier appel initialise le compteur (à 10h00 pile), la période se termine 1min plus tard.
                  >
                  > Vous pouvez donc jusqu'à 10h01 pile effectuer 47 appels, le compteur sera réinitialisé à 50 à ce moment-là.

                  ##### En cas de dépassement :

                  Si vous dépassez le nombre d'appels autorisés (`RateLimit-Remaining = 0`), le serveur répondra avec le `status 429` sur tous les appels suivants dans la même période.

                  Le header associé à ce code erreur `429` sera accompagné&nbsp;:&nbsp;
                  - des trois champs précédents ;
                  - d'un champ supplémentaire indiquant le temps à attendre avant de pouvoir effectuer des nouveaux appels.

                  {:.fr-table}
                  | Champs du header    |   Signification    |     Format           |
                  |:------------------------------|:------------------|:------------:|
                  | `RateLimit-Limit` |La **limite** concernant l'endpoint appelé, soit le nombre de requête/minute. | Nombre|
                  | `RateLimit-Remaining` |Le **nombre d'appels restants** durant la période courante d'une minute. | Nombre |
                  | `RateLimit-Reset` |La **fin de la période** courante. | Timestamp |
                  | *Uniquement pour le header associé au code erreur 429* <br> `Retry-after`| **Décompte du nombre de secondes restantes** avant la prochaine période | Secondes |

                  Vous pouvez donc **utiliser les champs du header pour optimiser votre consommation de l'API&nbsp;Particulier**.

                  #### Règles de bannissement en cas de surconsommation

                  En cas de non prise en compte des codes erreurs `429` ou en cas de dépassement de la limite de volumétrie globale, **votre IP sera temporairement bannie de nos serveurs pour une durée fixe et non révocable de 12h**. Si vous avez plusieurs jetons, tous seront donc bloqués pendant ce laps de temps.

                  Les appels depuis une IP bannie ne renvoient pas de codes HTTP, le serveur ne répond tout simplement pas.

                  {:.fr-highlight}
                  > ℹ️ Au bout de ces 12 heures, vos accès sont automatiquement rétablis ; **il est donc inutile d'écrire au support**.

                  Nous vous invitons à prendre les mesures nécessaires car le dépassement intervient généralement chez nos utilisateurs lorsque leur programme n'a pas été correctement configuré.

                  Pour les appels de traitement de masse, il est souhaitable que vous fassiez vos **batchs automatiques la nuit ou durant les heures creuses** afin de ne pas affecter la qualité du service pour le reste des usagers.

              - title: Configurer vos timeout
                anchor: 'configurer-vos-timeout'
                content: |+
                  Le timeout est le temps d'attente maximal de réponse à une requête. Il vous permet de ne pas immobiliser votre logiciel en le laissant bloqué sur un appel sans réponse.

                  De façon générale, nous vous recommandons un timeout de **5 secondes**.

                  De même, pour ne pas immobiliser nos serveurs, nous attendons les réponses de nos fournisseurs un maximum de 10 secondes avant de vous les retransmettre. Si ce délai d’attente est dépassé un code erreur HTTP `504` vous sera renvoyé.

              - title: Autoriser nos Autorités de Certifications
                anchor: 'autoriser-nos-autorités-de-certifications'
                content: |+
                  API&nbsp;Particulier utilise [DHIMYOTIS](https://www.dhimyotis.com/) comme organisme de délivrance de ses certificats SSL principaux ainsi que [Let's Encrypt](https://letsencrypt.org/) pour certains services secondaires.

                  Il est conseillé d'ajouter ces Autorités de Certifications (AC) à votre base de confiance si vous en avez une. Une solution idéale est d'utiliser un paquet d'autorités mises à jour automatiquement ([Mozilla par exemple](https://wiki.mozilla.org/CA/Included_Certificates))

                  API&nbsp;Particulier utilise des certificats multi-domaines ; c'es-à-dire avec un "nom courant" (_common name - CN_) et plusieurs "noms alternatifs du sujet" (_subject alternatives names - SAN_), **soyez certains que vos outils fonctionnent correctement avec**.

              - title: Gérer les erreurs - codes HTTPS
                anchor: 'gérer-les-erreurs---codes-https'
                content: |+
                  #### Un code standard HTTPS pour catégoriser le statut de l'appel

                  Toutes les réponse de l’API&nbsp;Particulier sont envoyées avec un code HTTPS. **Ces codes permettent de se renseigner sur le statut de l’appel**, et sont harmonisés pour l'ensemble des API quelque soit le fournisseur de données.
                  Pour en savoir plus sur les codes HTTPS, cet article de [Wikipedia](https://fr.wikipedia.org/wiki/Liste_des_codes_HTTP){:target="_blank"} constitue une bonne base explicative.

                  ##### En cas de succès, le code HTTP commence par 2 :

                  {:.fr-table}
                  | Code HTTPS                                       |      Signification                 |
                  |--------------------------------------------------|------------------------------------|
                  |`200` | **Tout va bien.**|

                  ##### En cas d’échec, si l’erreur vient de votre côté, le code HTTP commence par 4 :

                  {:.fr-table}
                  | Code HTTP                       |      Signification                     |
                  |---------------------------------|----------------------------------------|
                  |`400` | **Mauvaise requête** – La syntaxe de votre requête est erronée: les paramètres ne sont pas valides.|
                  |`401` | **Non autorisé** – Votre token est invalide ou manquant.|
                  |`403` | **Interdit** – Le serveur a compris votre requête mais refuse de l’exécuter car votre jeton ne vous donne pas accès à cette ressource.|
                  |`404` | **Non trouvé** – La ressource demandée n'a pas été trouvée. |


                  ###### En cas d’échec, si l’erreur provient d’API&nbsp;Particulier ou bien des fournisseurs de données, le code HTTP commence par 5 :

                  {:.fr-table}
                  | Code HTTP                        |      Signification                     |
                  |----------------------------------|----------------------------------------|
                  |`500` | **Erreur interne à API&nbsp;Particulier** – Une erreur interne du serveur d’API&nbsp;Particulier est survenue.
                  |`502` | **Erreur interne fournisseur** – Une erreur interne du serveur du ou des fournisseurs est survenue. [Consultez votre compte utilisateur](<%= authorization_requests_path %>){:target="_blank"}, l’historique de l’incident devrait y être affiché ; ainsi que les actions à venir.
                  |`503` | **Service non disponible** – Le service est temporairement indisponible ou en maintenance. Pour connaître l’historique de disponibilité et les incidents type de l’endpoint, vous pouvez [consulter le catalogue de données](../catalogue/).
                  |`504` | **Intermédiaire hors délai** – Le(s) producteur(s) de données ont mis trop de temps à répondre. Notre temps d’attente, nous permettant de ne pas immobiliser le serveur sur un appel sans réponse, est fixé à 10 secondes et a été dépassé.|

                  Retrouvez tous les codes erreurs pour chaque endpoint dans [notre swagger, partie "Response samples"](<%= developers_openapi_path %>){:target="_blank"}.
                  La liste des codes spécifiques à chaque endpoint y est disponible.
              - title: Renseigner les paramètres d'appel et de traçabilité
                anchor: 'renseigner-les-paramètres-dappel-et-de-traçabilité'
                content: |+
                  API&nbsp;Particulier vous permet d’accéder à des données protégées. C’est pourquoi, dans un **objectif de traçabilité**, nous vous demandons de renseigner dans chacune de vos requêtes, non seulement un jeton d’accès, mais aussi **certaines informations qualifiant votre requête**.


                  {:.fr-highlight.fr-highlight--caution}
                  > ⚠️ **Ces paramètres sont obligatoires pour les API FranceConnectées. les appels ne comportant pas ces paramètres sont rejetés, et un code erreur vous est renvoyé. Ces paramètres sont optionnels pour les API non FranceConnectées. Le caractère requis de ce champ est précisé dans le [swagger](https://particulier.api.gouv.fr/developpeurs/openapi#section/Bienvenue-sur-la-documentation-interactive-d'API-Particulier.).**. 

                  Pour chaque endpoint, nous précisons dans le [swagger, rubrique "Query parameters"](<%= developers_openapi_path %>){:target="_blank"} les paramètres obligatoires spécifiques, ci-dessous une explication détaillée des éléments à fournir pour chaque paramètre de traçabilité :

                  {:.fr-table}
                  | Paramètre                                                  |      Information à renseigner           |
                  |:----------------------------------------------------------:|-----------------------------------------|
                  |`&recipient=BénéficaireDeL'Appel`|**Le bénéficiaire de l'appel** <br><br>Ce paramètre permet la traçabilité de l'appel et doit correspondre au _SIRET de l'organisation publique habilitée à utiliser la donnée_. <br><br>Si vous êtes une collectivité ou une administration, ce paramètre doit donc être votre numéro de SIRET. Si vous êtes un éditeur, il s'agit du SIRET de l'organisation publique cliente demandant la donnée.<br><br>Une vérification est effectuée par API Particulier pour refuser tout format qui ne serait pas un numéro de SIRET.
              - title: Surveiller l'état des fournisseurs
                anchor: 'surveillance-etat-fournisseurs'
                content: |+
                  API Particulier met à disposition un ensemble de routes de "pings" permettant de récupérer l'état des services fournis par les différents fournisseurs de données.
                  L'ensemble des routes est disponible à l'adresse suivante: [Routes de pings (format JSON)](https://particulier.api.gouv.fr/api/pings).

                  Pour chacune de ces routes, l'équipe d'API Particulier effectue des vérifications spécifiques au fournisseur, permettant d'être au plus près de la réalité quand à la santé dudît fournisseur.
                  Chacune de ces routes renvoi un json sous le format suivant:

                  ```json
                  {
                    "status": "ok",
                    "last_update": "2023-11-03T12:24:07.185+01:00",
                    "last_ok_status": "2023-11-03T12:24:07.185+01:00"
                  }
                  ```

                  Avec:
                  - `status`, `string`, qui peut avoir 3 valeurs: `ok` quand tout est OK, `bad_gateway` quand il y a un souci, `unknown` quand on ne peut pas déterminer le status ;
                  - `last_update`, `datetime`, date de la dernière mise à jour: pour éviter de surcharger nos systèmes nous effectuons de la mise en cache sur les pings ;
                  - `last_ok_update`, `datetime`, date de la dernière mise à jour en OK: permet de savoir depuis quand le service est en défaut.

                  A noter que le status http est à 200 pour `ok` et `unknown`, 502 pour `bad_gateway` : cela permet à nos systèmes de monitoring de ne pas lever d'alertes en cas de données insuffisantes (et ainsi éviter des potentiels faux positifs).

                  Nous vous conseillons de passer par ces routes de surveillances, et ceci pour plusieurs raisons:

                  1. API Particulier s'occupe de la complexité vis-à-vis de la disponibilité de certains partenaires (limitation sur le nombre d'appels sur certains identifiants, échecs aléatoires etc..) ;
                  2. Il n'y a pas de limitations sur ces routes
                  3. L'implémentation est plus simple que d'utiliser les routes officieles
                  4. Un `bad gateway` d'une route de ping a de forte chance d'être un vrai positif, contrairement à un échec sur les endpoints qui peut être dû à des erreurs réseaux/temporaires.

              - title: Retrouver les droits d'un jeton
                anchor: 'retrouver-les-droits-dun-jeton'
                content: |+
                  Pour connaître **la liste des APIs auxquelles vous avez le droit** avec votre jeton d'accès, vous pouvez le vérifier avec l'API `/api/introspect`.

                  Si vous gérez les tokens pour vos utilisateurs, vous pouvez aussi utiliser cette API pour vérifier les droits associés à leurs tokens.

                  {:.fr-h5}
                  #### La requête HTTP :

                  ```
                  https://particulier.api.gouv.fr/api/introspect?token=LeTokenATester
                  ```

                  Le paramètre d'appel à renseigner est le token dont vous souhaitez connaître les droits.

                  > **Exemple de réponse JSON :**
                  >```
                  >{
                  >  "_id": "48ed8e98-33e4-4b05-88fe-f933d1b421c4",
                  >  "name": null,
                  >  "scopes": [
                  >    "cnous_statut_boursier",
                  >    [...]
                  >    "cnaf_adresse"
                  >  ]
                  >}
                  > ```

                  La réponse JSON renvoie la liste des API et champs autorisées. Retrouvez-leurs spécifications techniques dans le [Swagger](<%= developers_openapi_path %>){:target="_blank_"}.

          - anchor: 'kit-de-mise-en-production'
            title: Kit de mise en production&nbsp;🚀
            subsections:
              - title: Tester l'API en préproduction
                anchor: 'tester-api-preproduction'
                content: |+
                  {:.fr-text--lg}
                  L'API&nbsp;Particulier propose un environnement de test ou bac à sable pour vous permettre de tester le branchement de l'API avec votre système d'informations. 
                   
                  {:.fr-highlight}
                  > 💡 L'environnement de test est une fonctionnalité à destination des usagers techniques. Si vous êtes un profil métier, veuillez vous référer aux fiches métier de chaque API disponibles depuis le [catalogue](<%= endpoints_path %>).

                  {:.fr-text--lg}
                  **Les informations essentielles du bac à sable :**

                  - **Une URL :** L''environnement de staging est appelable avec `https://staging.particulier.api.gouv.fr`.

                  - **Les jetons d'accès** : Pour être fidèle au fonctionnement de l'API en production, cet environnement de test nécessite aussi un jeton d'accès, mais celui-ci, contrairement aux [jetons de production](#récupérer-le-jeton-jwt), est public car la donnée renvoyée en bac à sable est fictive. Un jeton ayant tous les droits est accessible [ici](https://github.com/etalab/siade_staging_data/blob/develop/tokens/default){:target="_blank"}. Pour générer un jeton spécifique, veuillez vous référer à ce [tutoriel](https://github.com/etalab/siade_staging_data/tree/develop/tokens){:target="_blank"}.
                  
                  - **Les paramètres d'appel** : Chaque cas de test documente les paramètres d'appel nécessaires. Vous pouvez aussi tester l'API avec la [modalité d'appel FranceConnect](<%= cas_usages_path(uid:'modalite_appel_france_connect') %>) en utilisant de faux jetons FranceConnect fournis dans le staging.

                  - **Les données fictives de réponse :** Les données retournées par cet environnement de test sont totalement fictives et disponibles depuis [ce dépôt](https://github.com/etalab/siade_staging_data/tree/develop/payloads){:target="_blank"}.

                  - **Pour rappel, le fichier OpenAPI est disponible depuis le [swagger](<%= developers_openapi_path %>)**, avec le bouton "Download" situé en début de page.

                  **Pour en savoir plus, veuillez consulter le [README du dépôt Github](https://github.com/etalab/siade_staging_data){:target="_blank"}.**
                  

              - title: Récupérer le jeton JWT&nbsp;🔑
                anchor: 'récupérer-le-jeton-jwt'
                content: |+
                  Seule la personne ayant fait la demande d'habilitation a accès au token, au travers du [compte utilisateur API&nbsp;Particulier](<%= api_particulier_user_profile_path %>){:target="_blank"}.

                  - _Si vous avez réalisé la demande d'habilitation_, vous pouvez **récupérer vos tokens ou jetons d'accès directement depuis votre [compte](<%= api_particulier_user_profile_path %>){:target="_blank"}**.

              - title: Faire sa première requête
                anchor: 'faire-sa-première-requête'
                content: |+
                  #### Utiliser l'environnement de production - _Swagger_

                  Après avoir récupéré votre jeton, vous pouvez faire un premier appel de test.

                  Utilisez l'[environnement de production documenté (_Swagger_)](https://api.gouv.fr/documentation/api-particulier){:target="_blank"}, disponible sur api.gouv.fr.
                  Il permet, à l'aide d'un token d'authentification valide 🔑, d'effectuer directement depuis le navigateur des tests de l'API. Les données confidentielles restent bien protégées. Vous y trouverez aussi la spécification technique téléchargeable sous format YAML afin de pouvoir accélérer le développement de vos outils d'interfaçage avec API&nbsp;Particulier.

                  #### Éléments constitutifs de la requête HTTP d'API&nbsp;Particulier

                  Chaque URL de requête est spécifiée dans le [Swagger](<%= developers_openapi_path %>){:target="_blank_"}.

                  #### Constatez votre première trace d’appel depuis le compte utilisateur

                  Une fois que vous avez fait un premier appel, celui-ci est **répertorié** dans votre [compte utilisateur](<%= authorization_requests_path %>){:target="_blank"}, dans la page détaillée de l'habilitation concernée, au niveau du jeton. Un lien vous permet d'accéder aux statistiques.

              - title: Configurer le logiciel métier
                anchor: 'configurer-le-logiciel-métier'
                content: |+
                  Documentation en construction&nbsp;🚧

              - title: Monitorer la disponibilité des API
                anchor: 'monitorer-la-disponibilité-des-api'
                content: |+
                  Dès l'intégration d'API Particulier, prenez un temps pour vous assurer d'être informé de la disponibilité de nos API&nbsp;:
                  - Ajoutez des routes de pings pour automatiser la surveillance des API par vous-même. Pour en savoir plus, consulter la rubrique [_"surveiller l'état des fournisseurs"_](<%= developers_path(anchor: 'surveillance-etat-fournisseurs') %>) ;
                  - abonnez-vous aux incidents et opérations de maintenance directement depuis notre [page de statut](https://status.entreprise.api.gouv.fr/){:target="_blank"}.

          - anchor: 'incidents-et-maintenances'
            title: Incidents et maintenances&nbsp;🚧
            subsections:
              - title: Que faire en cas de rupture de service ?
                anchor: 'que-faire-en-cas-de-rupture-de-service-'
                content: |+
                  Le service ne répond plus ? consultez [cette rubrique de notre FAQ](<%= api_particulier_faq_index_path(anchor: 'le-service-ne-repond-plus-que-faire') %>){:target="_blank"}.
              - title: Être informé des ruptures de service
                anchor: 'être-informé-des-ruptures-de-service'
                content: |+
                  1. **Abonnez-vous aux notifications** par e-mail depuis [notre page de statut](https://status.particulier.api.gouv.fr/subscribe/email){:target="_blank"}.

                  2. **Ajoutez des routes de pings pour automatiser la surveillance** des API par vous-même. Plutôt que de consulter ponctuellement notre page de statuts, vous pouvez vous branchez directement à nos routes afin d'avoir un suivi encore plus précis. Pour en savoir plus, consulter la rubrique [surveiller l'état des fournisseurs](<%= developers_path(anchor: 'surveillance-etat-fournisseurs') %>) ;

                  3. Si vous rencontrez un problème et avez besoin d'échanger avec nous en transmettant des données sensibles, utilisez le [formulaire de transfert d'informations sécurisées (Démarches simplifiées)](https://www.demarches-simplifiees.fr/commencer/api-particulier-transfert-securise-d-informations){:target="_blank"}. 
                  Si vous n'avez pas de réponse sous 72h, n'hésitez pas à nous envoyer votre numéro de demande Démarches simplifiées à l'adresse [api-particulier@api.gouv.fr](mailto:api-particulier@api.gouv.fr).

          - anchor: 'gestion-du-cache'
            title: Gestion du cache
            subsections:
              - title: Fonctionnement du cache
                anchor: 'fonctionnement-du-cache'
                content: |+
                  L'implémentation du cache suit les normes standard sur l'ensemble des apis via l'utilisation headers spécifiques : 

                  1. Dans toutes les réponses de nos APIs, l'entête vous transmet des informations sur le cache&nbsp;:

                  {:.fr-table}
                  | Champs du header    |   Signification    |     Format           |
                  |:------------------------------|:------------------|:------------:|
                  | `X-Response-Cached` |Indique si la réponse a été caché. | Booléen|
                  | `X-Cache-Expires-in` | Nombre de secondes avant que le cache n'expire. Si le cache est vide, cet entête est vide (mais présent). La validité du cache est variable selon l'API, veuillez vous référer à l'API en question pour plus de détail | Nombre |

                  2. Il est possible de forcer un appel sans utiliser le cache

                  {:.fr-table}
                  | Champs du header    |   Signification    |     Format           |
                  |:------------------------------|:------------------|
                  | `Cache-Control` | Si cette valeur est fixée à "no-cache", le système de cache est alors ignoré et la donnée est directement récupérée depuis le fournisseur de données. |
              - title: Est ce que toutes les APIs ont du cache ?
                anchor: est-ce-que-toutes-les-api-ont-du-cache
                content: |+
                  Non, l'activation et la durée du cache est fonction de l'API et dépend de la fréquence de rafraichissement de la données chez le fournisseur. Pour plus d'informations, veuillez vous référer à la documentation de l'API en question.

          - anchor: 'prolongation-du-jwt'
            title: Prolongation de la durée de vie du JWT&nbsp;🔑
            content: >-
              Pour comprendre comment prolonger votre jeton, consultez [cette rubrique de notre FAQ](<%= faq_index_path(anchor: 'comment-prolonger-mon-jeton-arrivant-a-expiration') %>){:target="_blank"}
          - anchor: 'guide-migration-v3'
            title: 🔄 Guide de migration V.3
            content: >-
              Pour les utilistaeurs de la V.2 de l'API Particulier, [ce guide de migration V.3](/blog/migration-api-particulier-v3) permet de comprendre les changements proposés par cette nouvelle version.



